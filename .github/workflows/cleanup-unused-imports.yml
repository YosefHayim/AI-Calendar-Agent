name: Cleanup unused imports (Biome)

on:
  push:
    branches: ["**"]
  pull_request:

permissions:
  contents: write
  pull-requests: write

jobs:
  prune-imports:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v4
        with:
          version: 10

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: Install deps
        run: pnpm install --frozen-lockfile

      # Only prune unused imports, allow unsafe fixes
      - name: Remove unused imports
        run: pnpm biome check --config-path biome.prune.json --write --unsafe --max-diagnostics 100000 .

      - name: Commit changes (if any)
        id: autocommit
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: prune unused imports via Biome [skip ci]"
          file_pattern: |
            **/*.js
            **/*.mjs
            **/*.cjs

      # Show which files changed in the job summary
      - name: Summarize changed files
        if: steps.autocommit.outputs.changes_detected == 'true'
        run: |
          echo "### Files updated" >> $GITHUB_STEP_SUMMARY
          git diff --name-status HEAD^ HEAD >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Diffstat" >> $GITHUB_STEP_SUMMARY
          git diff --stat HEAD^ HEAD >> $GITHUB_STEP_SUMMARY
          # also keep a patch as an artifact
          git diff HEAD^ HEAD > pruned.patch

      - name: Upload diff artifact
        if: steps.autocommit.outputs.changes_detected == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: pruned-diff
          path: pruned.patch

      # Comment on PR with the file list (when in PRs)
      - name: Comment PR with changed files
        if: steps.autocommit.outputs.changes_detected == 'true' && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const {data: files} = await github.rest.repos.compareCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: process.env.GITHUB_SHA + '^',
              head: process.env.GITHUB_SHA,
            });
            const list = files.files.map(f => `- ${f.status.toUpperCase()} ${f.filename}`).join('\n');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: `**Biome prune:** files updated\n\n${list}`
            });

      # Optional: strict check for the rest of rules, but don't block pruning
      - name: Biome check (full)
        run: pnpm biome check .
        continue-on-error: true
